// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	odps "github.com/aliyun/aliyun-odps-go-sdk/odps"

	structpb "google.golang.org/protobuf/types/known/structpb"

	tableschema "github.com/aliyun/aliyun-odps-go-sdk/odps/tableschema"
)

// MaxComputeClient is an autogenerated mock type for the Client type
type MaxComputeClient struct {
	mock.Mock
}

type MaxComputeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MaxComputeClient) EXPECT() *MaxComputeClient_Expecter {
	return &MaxComputeClient_Expecter{mock: &_m.Mock}
}

// GetMaskingPolicies provides a mock function with given fields: table
func (_m *MaxComputeClient) GetMaskingPolicies(table *odps.Table) (map[string][]string, error) {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for GetMaskingPolicies")
	}

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(*odps.Table) (map[string][]string, error)); ok {
		return rf(table)
	}
	if rf, ok := ret.Get(0).(func(*odps.Table) map[string][]string); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*odps.Table) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxComputeClient_GetMaskingPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaskingPolicies'
type MaxComputeClient_GetMaskingPolicies_Call struct {
	*mock.Call
}

// GetMaskingPolicies is a helper method to define mock.On call
//   - table *odps.Table
func (_e *MaxComputeClient_Expecter) GetMaskingPolicies(table interface{}) *MaxComputeClient_GetMaskingPolicies_Call {
	return &MaxComputeClient_GetMaskingPolicies_Call{Call: _e.mock.On("GetMaskingPolicies", table)}
}

func (_c *MaxComputeClient_GetMaskingPolicies_Call) Run(run func(table *odps.Table)) *MaxComputeClient_GetMaskingPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*odps.Table))
	})
	return _c
}

func (_c *MaxComputeClient_GetMaskingPolicies_Call) Return(_a0 map[string][]string, _a1 error) *MaxComputeClient_GetMaskingPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MaxComputeClient_GetMaskingPolicies_Call) RunAndReturn(run func(*odps.Table) (map[string][]string, error)) *MaxComputeClient_GetMaskingPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetTablePreview provides a mock function with given fields: ctx, partitionValue, table, maxRows
func (_m *MaxComputeClient) GetTablePreview(ctx context.Context, partitionValue string, table *odps.Table, maxRows int) ([]string, *structpb.ListValue, error) {
	ret := _m.Called(ctx, partitionValue, table, maxRows)

	if len(ret) == 0 {
		panic("no return value specified for GetTablePreview")
	}

	var r0 []string
	var r1 *structpb.ListValue
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *odps.Table, int) ([]string, *structpb.ListValue, error)); ok {
		return rf(ctx, partitionValue, table, maxRows)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *odps.Table, int) []string); ok {
		r0 = rf(ctx, partitionValue, table, maxRows)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *odps.Table, int) *structpb.ListValue); ok {
		r1 = rf(ctx, partitionValue, table, maxRows)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*structpb.ListValue)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *odps.Table, int) error); ok {
		r2 = rf(ctx, partitionValue, table, maxRows)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MaxComputeClient_GetTablePreview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTablePreview'
type MaxComputeClient_GetTablePreview_Call struct {
	*mock.Call
}

// GetTablePreview is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionValue string
//   - table *odps.Table
//   - maxRows int
func (_e *MaxComputeClient_Expecter) GetTablePreview(ctx interface{}, partitionValue interface{}, table interface{}, maxRows interface{}) *MaxComputeClient_GetTablePreview_Call {
	return &MaxComputeClient_GetTablePreview_Call{Call: _e.mock.On("GetTablePreview", ctx, partitionValue, table, maxRows)}
}

func (_c *MaxComputeClient_GetTablePreview_Call) Run(run func(ctx context.Context, partitionValue string, table *odps.Table, maxRows int)) *MaxComputeClient_GetTablePreview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*odps.Table), args[3].(int))
	})
	return _c
}

func (_c *MaxComputeClient_GetTablePreview_Call) Return(_a0 []string, _a1 *structpb.ListValue, _a2 error) *MaxComputeClient_GetTablePreview_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MaxComputeClient_GetTablePreview_Call) RunAndReturn(run func(context.Context, string, *odps.Table, int) ([]string, *structpb.ListValue, error)) *MaxComputeClient_GetTablePreview_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableSchema provides a mock function with given fields: ctx, table
func (_m *MaxComputeClient) GetTableSchema(ctx context.Context, table *odps.Table) (string, *tableschema.TableSchema, error) {
	ret := _m.Called(ctx, table)

	if len(ret) == 0 {
		panic("no return value specified for GetTableSchema")
	}

	var r0 string
	var r1 *tableschema.TableSchema
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *odps.Table) (string, *tableschema.TableSchema, error)); ok {
		return rf(ctx, table)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odps.Table) string); ok {
		r0 = rf(ctx, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odps.Table) *tableschema.TableSchema); ok {
		r1 = rf(ctx, table)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*tableschema.TableSchema)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *odps.Table) error); ok {
		r2 = rf(ctx, table)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MaxComputeClient_GetTableSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableSchema'
type MaxComputeClient_GetTableSchema_Call struct {
	*mock.Call
}

// GetTableSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - table *odps.Table
func (_e *MaxComputeClient_Expecter) GetTableSchema(ctx interface{}, table interface{}) *MaxComputeClient_GetTableSchema_Call {
	return &MaxComputeClient_GetTableSchema_Call{Call: _e.mock.On("GetTableSchema", ctx, table)}
}

func (_c *MaxComputeClient_GetTableSchema_Call) Run(run func(ctx context.Context, table *odps.Table)) *MaxComputeClient_GetTableSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*odps.Table))
	})
	return _c
}

func (_c *MaxComputeClient_GetTableSchema_Call) Return(_a0 string, _a1 *tableschema.TableSchema, _a2 error) *MaxComputeClient_GetTableSchema_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MaxComputeClient_GetTableSchema_Call) RunAndReturn(run func(context.Context, *odps.Table) (string, *tableschema.TableSchema, error)) *MaxComputeClient_GetTableSchema_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchema provides a mock function with given fields: ctx
func (_m *MaxComputeClient) ListSchema(ctx context.Context) ([]*odps.Schema, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSchema")
	}

	var r0 []*odps.Schema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*odps.Schema, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*odps.Schema); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*odps.Schema)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxComputeClient_ListSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchema'
type MaxComputeClient_ListSchema_Call struct {
	*mock.Call
}

// ListSchema is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MaxComputeClient_Expecter) ListSchema(ctx interface{}) *MaxComputeClient_ListSchema_Call {
	return &MaxComputeClient_ListSchema_Call{Call: _e.mock.On("ListSchema", ctx)}
}

func (_c *MaxComputeClient_ListSchema_Call) Run(run func(ctx context.Context)) *MaxComputeClient_ListSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MaxComputeClient_ListSchema_Call) Return(_a0 []*odps.Schema, _a1 error) *MaxComputeClient_ListSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MaxComputeClient_ListSchema_Call) RunAndReturn(run func(context.Context) ([]*odps.Schema, error)) *MaxComputeClient_ListSchema_Call {
	_c.Call.Return(run)
	return _c
}

// ListTable provides a mock function with given fields: ctx, schemaName
func (_m *MaxComputeClient) ListTable(ctx context.Context, schemaName string) ([]*odps.Table, error) {
	ret := _m.Called(ctx, schemaName)

	if len(ret) == 0 {
		panic("no return value specified for ListTable")
	}

	var r0 []*odps.Table
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*odps.Table, error)); ok {
		return rf(ctx, schemaName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*odps.Table); ok {
		r0 = rf(ctx, schemaName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*odps.Table)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, schemaName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxComputeClient_ListTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTable'
type MaxComputeClient_ListTable_Call struct {
	*mock.Call
}

// ListTable is a helper method to define mock.On call
//   - ctx context.Context
//   - schemaName string
func (_e *MaxComputeClient_Expecter) ListTable(ctx interface{}, schemaName interface{}) *MaxComputeClient_ListTable_Call {
	return &MaxComputeClient_ListTable_Call{Call: _e.mock.On("ListTable", ctx, schemaName)}
}

func (_c *MaxComputeClient_ListTable_Call) Run(run func(ctx context.Context, schemaName string)) *MaxComputeClient_ListTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MaxComputeClient_ListTable_Call) Return(_a0 []*odps.Table, _a1 error) *MaxComputeClient_ListTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MaxComputeClient_ListTable_Call) RunAndReturn(run func(context.Context, string) ([]*odps.Table, error)) *MaxComputeClient_ListTable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMaxComputeClient creates a new instance of MaxComputeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMaxComputeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MaxComputeClient {
	mock := &MaxComputeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
